from itertools import product
import random

# –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ –∑–∞–º–µ–Ω
IP = [1, 5, 2, 0, 3, 7, 4, 6]  # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞
IP_INV = [3, 0, 2, 4, 6, 1, 7, 5]  # –û–±—Ä–∞—Ç–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞
EP = [3, 0, 1, 2, 1, 2, 3, 0]  # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ/–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞
P4 = [1, 3, 2, 0]  # P4 –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞
P10 = [2, 4, 1, 6, 3, 9, 0, 8, 7, 5]  # P10 –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –∫–ª—é—á–∞
P8 = [5, 2, 6, 3, 7, 4, 9, 8]  # P8 –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–π

# S-–±–ª–æ–∫–∏
S0 = [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 3, 2]]
S1 = [[0, 1, 2, 3], [2, 0, 1, 3], [3, 0, 1, 0], [2, 1, 0, 3]]

def permute(bits, perm_table):
    return [bits[i] for i in perm_table]

def left_shift(bits, n):
    return bits[n:] + bits[:n]

def key_schedule(key):
    key = permute(key, P10)
    left, right = key[:5], key[5:]
    
    left, right = left_shift(left, 1), left_shift(right, 1)
    k1 = permute(left + right, P8)

    left, right = left_shift(left, 2), left_shift(right, 2)
    k2 = permute(left + right, P8)
    
    return k1, k2

def s_box(bits, sbox):
    row = (bits[0] << 1) + bits[3]
    col = (bits[1] << 1) + bits[2]
    return [int(x) for x in format(sbox[row][col], '02b')]

def f_function(bits, key):
    bits = permute(bits, EP)
    bits = [bits[i] ^ key[i] for i in range(8)]
    
    left, right = bits[:4], bits[4:]
    left, right = s_box(left, S0), s_box(right, S1)
    
    return permute(left + right, P4)

def round_function(bits, key):
    left, right = bits[:4], bits[4:]
    left = [left[i] ^ f_function(right, key)[i] for i in range(4)]
    return left + right

def encrypt(plain, key1, key2):
    bits = permute(plain, IP)
    bits = round_function(bits, key1)
    bits = bits[4:] + bits[:4]
    bits = round_function(bits, key2)
    return permute(bits, IP_INV)

def decrypt(cipher, key1, key2):
    bits = permute(cipher, IP)
    bits = round_function(bits, key2)
    bits = bits[4:] + bits[:4]
    bits = round_function(bits, key1)
    return permute(bits, IP_INV)

def meet_in_the_middle_attack(M, C, filtered_keys=None):
    possible_keys = list(product([0, 1], repeat=10)) if filtered_keys is None else filtered_keys
    y1 = {}

    # 1. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É Y1 = S-DES(M, K1)
    for k1 in possible_keys:
        k1_1, k1_2 = key_schedule(k1)
        Y1 = encrypt(M, k1_1, k1_2)
        Y1 = tuple(Y1) 
        if Y1 not in y1:
            y1[Y1] = list()
        y1[Y1].append(k1)
    # 2. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É Y2 = S-DES^-1(C, K2)
    candidates = []
    for k2 in possible_keys:
        k2_1, k2_2 = key_schedule(k2)
        Y2 = decrypt(C, k2_1, k2_2)
        Y2 = tuple(Y2)
        if Y2 in y1:
            candidates.append((y1[Y2], k2))
    # 3. –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ > 1, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞—Ç–∞–∫—É —Å –Ω–æ–≤—ã–º —Å–ª—É—á–∞–π–Ω—ã–º M'
    while len(candidates) > 1:
        
        # –°–ª—É—á–∞–π–Ω—ã–π –Ω–æ–≤—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç
        M_prime = [random.randint(0, 1) for _ in range(8)]
        print(f"üé≤ –ù–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç: {M_prime}")

        # –ò—Å—Ç–∏–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–Ω–∞—Å—Ç–æ—è—â–∏–µ key1, key2)
        C_prime = encrypt(encrypt(M_prime, key_schedule(key1)[0], key_schedule(key1)[1]),
                          key_schedule(key2)[0], key_schedule(key2)[1])

        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç
        filtered_candidates = []
        for k1_list, k2 in candidates:
            k1_set = []
            for k1 in k1_list:
                if validate_keys(M_prime, C_prime, k1, k2):
                    k1_set.append(k1)
            if len(k1_set) > 0:
                filtered_candidates.append([k1_set, k2])

        if len(filtered_candidates) == 1:
            return filtered_candidates[0]  # –ù–∞—à–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–∞—Ä—É
        
        candidates = filtered_candidates  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    return candidates[0] if candidates else None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–∞—Ä—É –∏–ª–∏ None

def validate_keys(M, C, k1, k2):
    k1_1, k1_2 = key_schedule(k1)
    k2_1, k2_2 = key_schedule(k2)

    C_check = encrypt(encrypt(M, k1_1, k1_2), k2_1, k2_2)

    # print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {C_check} == {C}?")  # –û—Ç–ª–∞–¥–∫–∞

    return C_check == C  

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    plaintext = [1, 0, 1, 1, 0, 1, 1, 0]  
    key1 = [0, 0, 1, 1, 0, 1, 1, 1, 1, 1]  
    key2 = [1, 0, 1, 1, 0, 1, 0, 0, 1, 1]


    k1_1, k1_2 = key_schedule(key1)  
    k2_1, k2_2 = key_schedule(key2)  
    ciphertext = encrypt(encrypt(plaintext, k1_1, k1_2), k2_1, k2_2)  
    decrypted_text = decrypt(decrypt(ciphertext, k2_1, k2_2), k1_1, k1_2)  

    print("–û—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç:      ", plaintext)
    print("–ö–ª—é—á 1 (K1):         ", key1)
    print("–ö–ª—é—á 2 (K2):         ", key2)
    print("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ", ciphertext)
    print("–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ", decrypted_text)


    print("\n=== –ê—Ç–∞–∫–∞ '–í—Å—Ç—Ä–µ—á–∞ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ' ===")
    # === –ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏ ===
    keys_found = meet_in_the_middle_attack(plaintext, ciphertext)

    if keys_found:
        print("\n=== –ù–∞–π–¥–µ–Ω–Ω–∞—è –ø–∞—Ä–∞ –∫–ª—é—á–µ–π ===")
        print(f"K1: {keys_found[0]}, K2: {keys_found[1]}")
        if keys_found == [[tuple(key1)], tuple(key2)]:
            print("\n‚úÖ –ê—Ç–∞–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏!")
        else:
            print("\n‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏!")
    else:
        print("\n‚ùå –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
