section .text
global _start

_start:

    mov eax, [m]                ;заносим значение m в регистр
    mov ebx, [n]                ;заносим значение n в регистр
    com_m_and_n:                ;
        cmp eax, ebx            ;сравнение m и n,если равны то выходим из цикла сравнения
        jz M_output             ;и изменения значений m и n
        jmp com_m_and_n_2       ;иначе мы продолжаем сравнение m и n
        
    com_m_and_n_2:              ;
        cmp eax, ebx            ;находим большее из m и n, чтобы в дальнейшем уменьшат нужный нам регистр
        jg m_bolshe             ;в зависимоти от того, что больше, ища НОД
        jl m_menshe             ;
        
    m_bolshe:                   ;
        sub eax, ebx            ;
        jmp com_m_and_n         ;Если m > n, то уменьшаем m на n, возвращаемся в начальное сравнение, чтобы продолжить поиск НОД
        
    m_menshe:                   ;
        sub ebx, eax            ;
        jmp com_m_and_n         ;Если n > m, то уменьшаем n на m, возвращаемся в начальное сравнение, чтобы продолжить поиск НОД
        
        
    M_output:                   ;
        add eax, byte 48        ;получаем значение числа с аски
        mov [m], eax            ;заносим обратно из регистров в переменные
        mov [n], ebx            ;
        xor eax, eax            ;зануляем регистры
        xor ebx, ebx            ;
        
        cmp [m], byte 48        ;сравниваем значение переменной с "нулем" в системе Аски
        jl error_input          ;если меньше прыгаем на функцию error_input
        cmp [m], byte 57        ;сравниваем значение переменной с "9" в системе Аски
        jg error_input          ;если больше, то прыгаем на функцию error_input
        
        
        mov ecx, m              ;переменная z для ввода
        mov edx, 1              ;указываем длину выводимого сообщения
        mov ebx, 1              ;вывод значения переменной z в консоль
        mov eax, 4              ;номер системного вызова (sys_write)
        int 0x80                ;прерывание
        jmp exit_2              ;прыжок на выход из программы
    
    error_input:
        mov ecx, msgErr         ;забор данных на вывод    
        mov edx, lenErr         ;длина сообщения на вывод msgErr
        mov ebx, 1              ;вывод сообщения об ошибке в консоль
        mov eax, 4              ;системный вызов вывода
        int 0x80                ;прерывание 
    exit_2:
        mov eax, 0x01           ;нс в занос eax
        mov ebx, 0              ;зануляем регистр ebx
        int 0x80                ;прерывание
    
section .data
    m dd 30                     ;мы задаем число m
    n dd 15                     ;мы задаем число n
    msgErr db 'multidigit answer';вывод сообщения о многозначном выводе
    lenErr equ $ - msgErr        ;длина сообщения о многозначном выводе